#pragma once

#include "Net.hpp"
#include <memory>


namespace net
{


////////////////////////////////////////////////////////////////////
/// \brief The ConnectedNet class
////////////////////////////////////////////////////////////////////
class ConnectedNet : public Net
{

public:

  ////////////////////////////////////////////////////////////////////
  /// \brief ConnectedNet
  /// \param topology
  ////////////////////////////////////////////////////////////////////
  ConnectedNet( const std::vector< unsigned > &topology );

  ////////////////////////////////////////////////////////////////////
  /// \brief feedForward
  /// \param inputVals
  ////////////////////////////////////////////////////////////////////
  virtual
  void feedForward ( const std::vector< double > &inputVals ) final;

  ////////////////////////////////////////////////////////////////////
  /// \brief backProp
  /// \param targetVals
  ////////////////////////////////////////////////////////////////////
  virtual
  void backProp ( const std::vector< double > &targetVals ) final;

  ////////////////////////////////////////////////////////////////////
  /// \brief getResults
  /// \param pResultVals
  ////////////////////////////////////////////////////////////////////
  virtual
  void getResults ( std::vector< double > *pResultVals ) const final;

  ////////////////////////////////////////////////////////////////////
  /// \brief getAverageError
  /// \return
  ////////////////////////////////////////////////////////////////////
  virtual
  double getAverageError ( ) final;


protected:

private:

  std::unique_ptr< Net > netImpl_;

};

} // namespace net
