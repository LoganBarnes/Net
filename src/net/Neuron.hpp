#pragma once

#include <vector>
#include <cstdlib>
#include <random>
#include "CommonStructs.hpp"


namespace net
{


////////////////////////////////////////////////////////////////////
/// \brief The Neuron class
////////////////////////////////////////////////////////////////////
class Neuron
{

public:

  ////////////////////////////////////////////////////////////////////
  /// \brief Neuron
  /// \param numOutputs
  ////////////////////////////////////////////////////////////////////
  Neuron(
         unsigned numOutputs,
         unsigned myIndex
         );

  ////////////////////////////////////////////////////////////////////
  /// \brief setOutputVal
  /// \param val
  ////////////////////////////////////////////////////////////////////
  void
  setOutputVal( const double val ) { outputVal_ = val; }

  ////////////////////////////////////////////////////////////////////
  /// \brief getOutputVal
  /// \return
  ////////////////////////////////////////////////////////////////////
  double
  getOutputVal( ) const { return outputVal_; }

  ////////////////////////////////////////////////////////////////////
  /// \brief getNumOutputWeights
  ////////////////////////////////////////////////////////////////////
  unsigned
  getNumOutputWeights( ) const { return outputWeights_.size( ); }

  ////////////////////////////////////////////////////////////////////
  /// \brief feedForward
  /// \param prevLayer
  ////////////////////////////////////////////////////////////////////
  void feedForward ( const Layer &prevLayer );

  ////////////////////////////////////////////////////////////////////
  /// \brief calcOutputGradients
  /// \param targetVal
  ////////////////////////////////////////////////////////////////////
  void calcOutputGradients ( double targetVal );

  ////////////////////////////////////////////////////////////////////
  /// \brief calcHiddenGradients
  /// \param nextLayer
  ////////////////////////////////////////////////////////////////////
  void calcHiddenGradients ( const Layer &nextLayer );

  ////////////////////////////////////////////////////////////////////
  /// \brief updateInputWeights
  /// \param prevLayer
  ////////////////////////////////////////////////////////////////////
  void updateInputWeights ( Layer &prevLayer );


protected:

private:

  ////////////////////////////////////////////////////////////////////
  /// \brief _sumDOW
  /// \param nextLayer
  /// \return
  ////////////////////////////////////////////////////////////////////
  double _sumDOW ( const Layer &nextLayer ) const;

  unsigned myIndex_;
  double outputVal_;
  std::vector< Connection > outputWeights_;
  double gradient_;

  ////////////////////////////////////////////////////////////////////
  /// \brief randomWeight
  /// \return
  ////////////////////////////////////////////////////////////////////
  static double randomWeight ( );

  ////////////////////////////////////////////////////////////////////
  /// \brief transferFunction
  /// \param x
  /// \return
  ////////////////////////////////////////////////////////////////////
  static double transferFunction ( double x );

  ////////////////////////////////////////////////////////////////////
  /// \brief transferFunctionDerivative
  /// \param x
  /// \return
  ////////////////////////////////////////////////////////////////////
  static double transferFunctionDerivative ( double x );

};


}
